---
- name: Download file from url
  ansible.builtin.get_url:
    url: "{{ prom_package_url }}"
    dest: "{{ download_loc }}"

# - name: Extract tar into development
#   ansible.builtin.unarchive:
#     src: "/tmp/{{ src_file }}"
#     dest: "{{ extract_to_loc }}"
#     remote_src: yes

- name: Extract prom files
  ansible.builtin.command:
    chdir: "{{ download_loc }}"
    cmd: "tar -xvf {{ src_file }}"

- name: Use command to rename file
  ansible.builtin.command:
    chdir: "{{ download_loc }}"
    cmd: "mv -f {{ src_file | split('.tar') | first }} /development/prometheus"

- name: Create prometheus user
  ansible.builtin.user:
    name: prometheus
    shell: /bin/bash
    create_home: no

- name: Create directories for prometheus
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: prometheus
    group: prometheus
  loop: "{{ prom_dirs }}"

- name: Copy binaries to binary path and set the owner
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ binary_path }}"
    mode: preserve
    owner: prometheus
    group: prometheus
    remote_src: true
    force: true
  loop: "{{ prom_binaries }}"

- name: Copy prom web UI files and set the owner
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ web_ui_path }}"
    directory_mode: preserve
    owner: prometheus
    group: prometheus
    remote_src: true
    force: true
  loop: "{{ web_UI_files }}"

- name: Set firewalld rules for UI access
  ansible.posix.firewalld:
      port: 9090/tcp
      zone: public
      state: enabled
      permanent: true

- name: copy prom config
  ansible.builtin.copy:
    src: "{{ prom_config_file }}"
    dest: "{{ prom_config_dest }}"
    owner: prometheus
    group: prometheus
    force: true

- name: copy prom service
  ansible.builtin.copy:
    src: "{{ prom_svc_file }}"
    dest: "{{ prom_svc_dest }}"
    force: true

- name: Start and enable prometheus service
  ansible.builtin.service:
    name: prometheus
    enabled: true
    state: started
